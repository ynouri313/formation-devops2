name: Node.js CI/CD Docker Compose Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker images
        run: |
          # Build the Node.js app image manually
          docker build -t formation-devops2-nodeapp:latest ./frontend

          # Tag and push the Node.js app
          docker tag formation-devops2-nodeapp:latest ${{ secrets.DOCKER_USERNAME }}/formation-devops2-nodeapp:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/formation-devops2-nodeapp:latest

      - name: Run tests inside Docker container
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/formation-devops2-nodeapp:latest npm test  || true  
          #The || true ensures that even if no tests exist, the pipeline does not fail.

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH for EC2 deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker Compose to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ${{ secrets.My_REPO_DIR }}
            git pull origin main
            docker compose pull  # Pull updated images
            docker compose down  # Stop and remove existing containers
            docker compose up -d  # Start the containers
          EOF
